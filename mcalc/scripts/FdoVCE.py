#!/usr/bin/python
"""
$ python doVCE.py <Aeff> <outfile> [<he4_fname> <he5_fname> <he6_fname>]

Generates an interaction file based on He4, He5, and He6
output files.
"""


from sys import argv

def GetE0(Aeff, he4_fname):
  if he4_fname is not None:
    fname = he4_fname
  else:
    fname = 'he4_%d/he4_A%d.out'%(Aeff,Aeff)
  f = open(fname)
  line = f.readline()
  while 'State # 1   Energy' not in line: line = f.readline()
  ldat = line.split()
  E0 = float(ldat[5])
  return E0


def GetSPE(Aeff,E0, he5_fname):
  np1,np3=999.,999.
  if he5_fname is not None:
    fname = he5_fname
  else:
    fname = 'he5_%d/he5_A%d.out'%(Aeff,Aeff)
  f = open(fname)
  for line in f:
    if 'State # ' not in line: continue
    ldat = line.split()
    e = float(ldat[5])
    j = int(2*float(ldat[8]))
    if j==1 and np1 ==999.: np1 = e-E0
    if j==3 and np3 ==999.: np3 = e-E0
    if np1!=999. and np3!=999.: break
  return np1,np3


def PrintHeader(Aeff,E0,SPE):
  header_lines = list()
  header_lines.append( '!  Effective SM interaction generated by OLS and VCE with Aeff = %d'%(Aeff) )
  header_lines.append( '!  Zero body term: %10.6f'%(E0) )
  header_lines.append( '!  Index  n  l  j tz' )
  header_lines.append( '!  1     0  1  1  1' )
  header_lines.append( '!  2     0  1  3  1' )
  header_lines.append( '! ' )
  header_lines.append( '-999 '+'  '.join(['%10.6f'%x for x in SPE])+'  4  6  0.000000' )
  return '\n'.join(header_lines) + '\n'

def GetTBME(Aeff,E0,SPE, out_fname, he6_fname):
  write_lines = list()
  write_lines.append(PrintHeader(Aeff,E0,SPE))
  if he6_fname is not None:
    fname = he6_fname
  else:
    fname = 'he6_%d/Heff_OLS.dat'%Aeff
  f = open(fname)
  line = f.readline()
  dim = int(line.split()[0])
  kets = []
  for i in range(dim):
    ldat = f.readline().split()
    p,q = [int(x) for x in ldat[1:3]]
    J,T = [int(x) for x in ldat[9:11]]
    kets.append( {'p':p,'q':q,'J':J,'T':T} )
  for i in range(dim):
   ldat = f.readline().split()
   for j in range(i,dim):
    if (kets[i]['J'],kets[i]['T']) != (kets[j]['J'],kets[j]['T']): continue
    v = float(ldat[j])
    if i == j: v-= E0+SPE[kets[i]['p']-1]+SPE[kets[i]['q']-1]
    next_line = '%3d %3d %3d %3d  %3d %3d  %10.6f'%(kets[i]['p'],kets[i]['q'],kets[j]['p'],kets[j]['q'],kets[i]['J'],kets[i]['T'],v)
    write_lines.append(next_line + '\n')
  # write the file
  outfile = open(out_fname, 'w')
  for line in write_lines:
    outfile.write(line)
  outfile.close()

def run(Aeff, out_fname, he4_fname=None, he5_fname=None, he6_fname=None):
    E0 = GetE0(Aeff, he4_fname)
    SPE = GetSPE(Aeff,E0, he5_fname)
    GetTBME(Aeff,E0,SPE, out_fname, he6_fname)

    # Do the inconsistent/universal way
    #Aeff = 6
    #E0 = GetE0(Aeff-2)
    #SPE = GetSPE(Aeff-1,E0)
    #GetTBME(Aeff,E0,SPE)

if len(argv) >= 3:
    Aeff = int(argv[1])
    out_fname = argv[2]
    if len(argv) >= 6:
      he4_fname = argv[3]
      he5_fname = argv[4]
      he6_fname = argv[5]
    else:
      he4_fname, he5_fname, he6_name = (None,)*3
    run(Aeff=Aeff, out_fname=out_fname,
        he4_fname=he4_fname, he5_fname=he5_fname, he6_fname=he6_fname)
